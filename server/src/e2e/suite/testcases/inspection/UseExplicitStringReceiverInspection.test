========================================================================
String fallback
========================================================================
import "@stdlib/deploy";

primitive String;

contract Contract {
    owner: Address;

    init(owner: Address) {
        self.owner = owner;
    }

    receive(msg: String) {
        if (msg == "some") {
            // ...
        }
    }

    get fun owner(): Address {
        return self.owner;
    }
}
------------------------------------------------------------------------
1 12:19 to 12:25 Consider using an explicit receiver for "some" message (tact)

========================================================================
String fallback 2
========================================================================
import "@stdlib/deploy";

primitive String;

contract Contract {
    owner: Address;

    init(owner: Address) {
        self.owner = owner;
    }

    receive(msg: String) {
        if (msg == "some") {
            // ...
        }

        if (msg == "other") {
            // ...
        }
    }

    get fun owner(): Address {
        return self.owner;
    }
}
------------------------------------------------------------------------
1 12:19 to 12:25 Consider using an explicit receiver for "some" message (tact)
1 16:19 to 16:26 Consider using an explicit receiver for "other" message (tact)

========================================================================
String fallback with not equal
========================================================================
import "@stdlib/deploy";

primitive String;

contract Contract {
    owner: Address;

    init(owner: Address) {
        self.owner = owner;
    }

    receive(msg: String) {
        if (msg != "some") {
            // ...
        }
    }

    get fun owner(): Address {
        return self.owner;
    }
}
------------------------------------------------------------------------
no issues
