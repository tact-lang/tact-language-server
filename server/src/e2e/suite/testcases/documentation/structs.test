========================================================================
Struct documentation
========================================================================
primitive String;
primitive Int;

/// Some cool struct
struct <caret>Foo {
    name: String;
    value: Int;
}
------------------------------------------------------------------------
```tact
struct Foo {
    name: String;
    value: Int;
}
```

---

**TL-B:**

```tlb
_ name:^Cell
  value:int257 = Foo
```

**Size:** 257 bits plus up to 1023 bits.

---

Some cool struct

========================================================================
Message documentation
========================================================================
primitive String;
primitive Int;

/// Some cool message
message <caret>Foo {
    name: String;
    value: Int;
}
------------------------------------------------------------------------
```tact
message(0xd7c87fd7) Foo {
    name: String;
    value: Int;
}
```

---

**TL-B:**

```tlb
foo#d7c87fd7
    name:^Cell
    value:int257 = Foo
```

**Size:** 289 bits plus up to 1023 bits.

---

Some cool message

========================================================================
Message with ID documentation
========================================================================
primitive String;
primitive Int;

/// Some cool message
message(0x178d4519) <caret>Foo {
    name: String;
    value: Int;
}
------------------------------------------------------------------------
```tact
message(0x178d4519) Foo {
    name: String;
    value: Int;
}
```

---

**TL-B:**

```tlb
foo#178d4519
    name:^Cell
    value:int257 = Foo
```

**Size:** 289 bits plus up to 1023 bits.

---

Some cool message

========================================================================
Field declaration
========================================================================
primitive Int;

struct Foo {
    field: Int;
}

fun foo() {
    let f = Foo { <caret>field: 10 };
}
------------------------------------------------------------------------
```tact
struct Foo
field: Int
```

========================================================================
Field declaration 2
========================================================================
primitive Int;

struct Foo {
    field: Int;
}

fun foo() {
    let f = Foo { field: 10 };
    f.<caret>field;
}
------------------------------------------------------------------------
```tact
struct Foo
field: Int
```

========================================================================
Field declaration 3
========================================================================
primitive Int;

message Foo {
    field: Int;
}

fun foo() {
    let f = Foo { field: 10 };
    f.<caret>field;
}
------------------------------------------------------------------------
```tact
message Foo
field: Int
```

========================================================================
Field declaration with default value
========================================================================
primitive Int;

struct Foo {
    field: Int = 0;
}

fun foo() {
    let f = Foo { field: 10 };
    f.<caret>field;
}
------------------------------------------------------------------------
```tact
struct Foo
field: Int = 0
```

========================================================================
Field declaration with type with TL-B
========================================================================
primitive Int;

struct Foo {
    field: Int as uint8;
}

fun foo() {
    let f = Foo { <caret>field: 10 };
}
------------------------------------------------------------------------
```tact
struct Foo
field: Int as uint8
```

========================================================================
Field declaration with type with TL-B 2
========================================================================
primitive Slice;

struct Foo {
    field: Slice as remaining;
}

fun foo() {
    let f = Foo { <caret>field: 10 };
}
------------------------------------------------------------------------
```tact
struct Foo
field: Slice as remaining
```

========================================================================
Field declaration with type with TL-B 3
========================================================================
primitive Int;

struct Foo {
    field: map<Int as uint8, Int>;
}

fun foo() {
    let f = Foo { <caret>field: 10 };
}
------------------------------------------------------------------------
```tact
struct Foo
field: map<Int as uint8, Int>
```

========================================================================
Struct declaration with other struct field
========================================================================
primitive Int;

struct VerifyInfo {
    owner: Address;
    minter: Address;
    code: Cell;
}

// verify_info$_ owner:MsgAddress minter:MsgAddress code:^Cell = VerifyInfo
// take_wallet_balance#ca77fdc2 balance:Coins verify_info:(Maybe VerifyInfo) = InternalMsgBody
message(0xca77fdc2) <caret>TakeWalletBalance {
    balance: Int as coins;
    verifyInfo: VerifyInfo?;
}
------------------------------------------------------------------------
```tact
message(0xca77fdc2) TakeWalletBalance {
    balance: Int as coins;
    verifyInfo: VerifyInfo?;
}
```

---

**TL-B:**

```tlb
take_wallet_balance#ca77fdc2
    balance:Coins
    verifyInfo:Maybe VerifyInfo = TakeWalletBalance
```

**Size:** 37 bits plus up to 120 bits.

---

verify_info$_ owner:MsgAddress minter:MsgAddress code:^Cell = VerifyInfo
take_wallet_balance#ca77fdc2 balance:Coins verify_info:(Maybe VerifyInfo) = InternalMsgBody
