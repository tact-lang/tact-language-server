========================================================================
Global function completion
========================================================================
primitive Int;

fun add(a: Int, b: Int): Int {
    return a + b;
}

fun multiply(x: Int, y: Int): Int {
    return x * y;
}

fun test() {
    <caret>
}
------------------------------------------------------------------------
primitive Int;

fun add(a: Int, b: Int): Int {
    return a + b;
}

fun multiply(x: Int, y: Int): Int {
    return x * y;
}

fun test() {
    false
}

========================================================================
Fun completion with parameters
========================================================================
primitive Int;

fun add(a: Int, b: Int): Int {
    return a + b;
}

fun test() {
    let result = <caret>
}
------------------------------------------------------------------------
primitive Int;

fun add(a: Int, b: Int): Int {
    return a + b;
}

fun test() {
    let result = false
}

========================================================================
Extends function completion
========================================================================
primitive Int;

extends fun increment(self: Int): Int {
    return self + 1;
}

extends fun double(self: Int): Int {
    return self * 2;
}

fun test() {
    let num: Int = 1;
    num.<caret>
}
------------------------------------------------------------------------
primitive Int;

extends fun increment(self: Int): Int {
    return self + 1;
}

extends fun double(self: Int): Int {
    return self * 2;
}

fun test() {
    let num: Int = 1;
    num.double()
}

========================================================================
Fun completion in expression
========================================================================
primitive Int;

fun add(a: Int, b: Int): Int {
    return a + b;
}

fun test() {
    let x = add(<caret>)
}
------------------------------------------------------------------------
primitive Int;

fun add(a: Int, b: Int): Int {
    return a + b;
}

fun test() {
    let x = add(false)
}

========================================================================
Native function completion
========================================================================
primitive Int;

@name("op_add")
native add(a: Int, b: Int): Int;

@name("op_mul")
native multiply(x: Int, y: Int): Int;

fun test() {
    <caret>
}
------------------------------------------------------------------------
primitive Int;

@name("op_add")
native add(a: Int, b: Int): Int;

@name("op_mul")
native multiply(x: Int, y: Int): Int;

fun test() {
    false
}

========================================================================
No extends function in unqualified completion
========================================================================
primitive Int;

extends fun increment(self: Int): Int {
    return self + 1;
}

extends fun double(self: Int): Int {
    return self * 2;
}

fun foo() {}

fun test() {
    <caret>
}
------------------------------------------------------------------------
primitive Int;

extends fun increment(self: Int): Int {
    return self + 1;
}

extends fun double(self: Int): Int {
    return self * 2;
}

fun foo() {}

fun test() {
    false
}

========================================================================
Completion in function name
========================================================================
primitive Int;

fun <caret>(a: Int, b: Int): Int {
    return a + b;
}
------------------------------------------------------------------------
primitive Int;

fun fun(a: Int, b: Int): Int {
    return a + b;
}

========================================================================
Completion in function name 2
========================================================================
primitive Int;

trait Foo {
    fun <caret>(a: Int, b: Int): Int {
        return a + b;
    }
}
------------------------------------------------------------------------
primitive Int;

trait Foo {
    fun fun(a: Int, b: Int): Int {
        return a + b;
    }
}

========================================================================
Completion in function name 3
========================================================================
primitive Int;

contract Foo {
    fun <caret>(a: Int, b: Int): Int {
        return a + b;
    }
}
------------------------------------------------------------------------
primitive Int;

contract Foo {
    fun fun(a: Int, b: Int): Int {
        return a + b;
    }
}

========================================================================
Completion of function return type
========================================================================
primitive Int;

struct Bar {}
struct Baz {}

fun multiply(x: Int, y: Int): <caret> {
    return x * y;
}
------------------------------------------------------------------------
primitive Int;

struct Bar {}
struct Baz {}

fun multiply(x: Int, y: Int): map<Int, String> {
    return x * y;
}
