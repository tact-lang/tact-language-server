========================================================================
Message fields completion
========================================================================
primitive Int;
primitive Address;

message Transfer {
    amount: Int;
    to: Address;
}

fun test(msg: Transfer) {
    msg.<caret>
}
------------------------------------------------------------------------
9  amount: Int   of Transfer
9  to: Address   of Transfer

========================================================================
Struct fields completion
========================================================================
primitive Int;

struct Point {
    x: Int;
    y: Int as uint32;
    z: Int?;
}

fun test(p: Point) {
    p.<caret>
}
------------------------------------------------------------------------
9  x: Int   of Point
9  y: Int   of Point
9  z: Int?   of Point

========================================================================
Contract fields completion
========================================================================
primitive Int;
primitive Address;

contract Counter {
    val: Int;
    owner: Address;

    init(owner: Address) {
        self.owner = owner;
        self.val = 0;
    }
}

fun test(c: Counter) {
    c.<caret>
}
------------------------------------------------------------------------
9  owner: Address   of Counter
9  val: Int   of Counter

========================================================================
Map fields completion
========================================================================
primitive Int;
primitive Address;

struct Storage {
    balances: map<Address, Int>;
    allowances: map<Address, map<Address, Int>>;
}

fun test(s: Storage) {
    s.<caret>
}
------------------------------------------------------------------------
9  allowances: map<Address, Int>   of Storage
9  balances: map<Address, Int>   of Storage

========================================================================
Optional fields completion
========================================================================
primitive Int;
primitive Address;

struct User {
    name: String;
    age: Int?;
    address: Address?;
}

fun test(u: User?) {
    u.<caret>
}
------------------------------------------------------------------------
9  address: Address?   of User
9  age: Int?   of User
9  name:    of User

========================================================================
Nested fields completion
========================================================================
primitive Int;
primitive Address;

struct Inner {
    value: Int;
}

struct Outer {
    inner: Inner;
}

fun test(o: Outer) {
    o.inner.<caret>
}
------------------------------------------------------------------------
9  value: Int   of Inner

========================================================================
Message with TLB fields completion
========================================================================
primitive Int;
primitive Address;

message TokenTransfer {
    queryId: Int as uint64;
    amount: Int as coins;
    from: Address;
    to: Address;
    responseDestination: Address?;
}

fun test(msg: TokenTransfer) {
    msg.<caret>
}
------------------------------------------------------------------------
9  amount: Int   of TokenTransfer
9  from: Address   of TokenTransfer
9  queryId: Int   of TokenTransfer
9  responseDestination: Address?   of TokenTransfer
9  to: Address   of TokenTransfer

========================================================================
Field of bounced<struct>
========================================================================
primitive Int;
primitive Address;
primitive String;

struct User {
    name: String;
    age: Int?;
    address: Address?;
}

contract Foo {
    receive(b: bounced<User>) {
        b.<caret>
    }
}
------------------------------------------------------------------------
9  address: Address?   of User
9  age: Int?   of User
9  name: String   of User

========================================================================
Field of option struct without unwrapping
========================================================================
primitive Int;
primitive Address;
primitive String;

struct User {
    name: String;
    age: Int?;
    address: Address?;
}

fun foo(f: User?) {
    f.<caret>
}
------------------------------------------------------------------------
9  address: Address?   of User
9  age: Int?   of User
9  name: String   of User

========================================================================
Field of option struct with unwrapping
========================================================================
primitive Int;
primitive Address;
primitive String;

struct User {
    name: String;
    age: Int?;
    address: Address?;
}

fun foo(f: User?) {
    f!!.<caret>
}
------------------------------------------------------------------------
9  address: Address?   of User
9  age: Int?   of User
9  name: String   of User

========================================================================
Field with same name method
========================================================================
primitive Int;
primitive Address;
primitive String;

trait Foo {
    name: String;

    fun name(): String {
        return self.name;
    }

    fun bar() {
        return self.<caret>;
    }
}
------------------------------------------------------------------------
9  name: String   of Foo
2  bar()
2  name(): String
